
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cbkmhctwwawtykbqdagz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNia21oY3R3d2F3dHlrYnFkYWd6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA4NjMzNjAsImV4cCI6MjA1NjQzOTM2MH0.CLkLELHR5qH3zfV1esNChyT2h6WedObojZgy4y6SIsc";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Define explicitly typed auth providers
export const authProviders = {
  google: 'google' as const,
  github: 'github' as const,
  facebook: 'facebook' as const,
  twitter: 'twitter' as const,
  discord: 'discord' as const,
  email: 'email' as const
};

// Authentication Functions
export const signInWithEmail = async (email: string, password: string) => {
  return await supabase.auth.signInWithPassword({
    email,
    password
  });
};

export const signInWithProvider = async (provider: 'google' | 'github' | 'facebook' | 'twitter' | 'discord') => {
  return await supabase.auth.signInWithOAuth({
    provider: provider,
    options: {
      redirectTo: window.location.origin
    }
  });
};

export const signUp = async (email: string, password: string) => {
  return await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: window.location.origin
    }
  });
};

export const signOut = async () => {
  return await supabase.auth.signOut();
};

export const getCurrentUser = async () => {
  const { data } = await supabase.auth.getUser();
  return data.user;
};

export const getSession = async () => {
  const { data } = await supabase.auth.getSession();
  return data.session;
};

// Define interfaces for RPC function results
export interface UserPoints {
  total_points: number;
}

export interface SpinHistoryItem {
  id: string;
  fecha: string;
  premio_id: string;
  points_earned: number;
}

export interface LeaderboardItem {
  user_id: string;
  total_points: number;
  username: string;
  display_name: string;
  total_spins: number;
}

export interface UserProfile {
  username: string | null;
  display_name: string | null;
  favorite_color: string | null;
  total_spins: number;
  created_at: string;
  updated_at: string;
}

// Expose our RPC functions with proper typing
export const getUserPoints = async (userId: string): Promise<number> => {
  const { data, error } = await supabase.rpc('get_user_points', { 
    user_id_param: userId 
  });
  
  if (error) throw error;
  return data || 0;
};

export const getUserSpinHistory = async (userId: string, limit = 30): Promise<SpinHistoryItem[]> => {
  const { data, error } = await supabase.rpc('get_user_spin_history', { 
    user_id_param: userId,
    limit_count: limit
  });
  
  if (error) throw error;
  return data || [];
};

export const getLeaderboard = async (limit = 5): Promise<LeaderboardItem[]> => {
  const { data, error } = await supabase.rpc('get_leaderboard', { 
    limit_count: limit 
  });
  
  if (error) throw error;
  return data || [];
};

export const saveSpinResult = async (
  userId: string, 
  prizeId: string, 
  pointsEarned = 0
): Promise<void> => {
  const { error } = await supabase.rpc('save_spin_result', {
    user_id_param: userId,
    premio_id_param: prizeId,
    points_earned_param: pointsEarned
  });
  
  if (error) throw error;
};

// User settings interface
export interface UserSettings {
  soundSettings: {
    masterVolume: number;
    spinSound: boolean;
    winSound: boolean;
    clickSound: boolean;
  };
  favoriteColor?: string;
  customRoulettes?: any[];
}

export const saveUserSettings = async (
  userId: string,
  settings: UserSettings
): Promise<void> => {
  const { error } = await supabase.rpc('save_user_settings', {
    user_id_param: userId,
    settings_json: settings
  });
  
  if (error) throw error;
};

export const getUserSettings = async (userId: string): Promise<UserSettings | null> => {
  const { data, error } = await supabase.rpc('get_user_settings', {
    user_id_param: userId
  });
  
  if (error) throw error;
  return data || null;
};

export const saveCustomRoulette = async (
  userId: string,
  name: string,
  prizes: any[]
): Promise<string> => {
  const { data, error } = await supabase.rpc('save_custom_roulette', {
    user_id_param: userId,
    roulette_name: name,
    prizes_json: prizes
  });
  
  if (error) throw error;
  return data || '';
};

export const getUserRoulettes = async (userId: string): Promise<any[]> => {
  const { data, error } = await supabase.rpc('get_user_roulettes', {
    user_id_param: userId
  });
  
  if (error) throw error;
  return data || [];
};

export const deleteCustomRoulette = async (
  userId: string,
  rouletteId: string
): Promise<void> => {
  const { error } = await supabase.rpc('delete_custom_roulette', {
    user_id_param: userId,
    roulette_id_param: rouletteId
  });
  
  if (error) throw error;
};

// User profile functions
export const updateUserProfile = async (
  userId: string,
  profile: {
    username?: string;
    display_name?: string;
    favorite_color?: string;
  }
): Promise<void> => {
  const { error } = await supabase.rpc('update_user_profile', {
    user_id_param: userId,
    username_param: profile.username,
    display_name_param: profile.display_name,
    favorite_color_param: profile.favorite_color
  });
  
  if (error) throw error;
};

export const getUserProfile = async (userId: string): Promise<UserProfile | null> => {
  const { data, error } = await supabase.rpc('get_user_profile', {
    user_id_param: userId
  });
  
  if (error) throw error;
  return data || null;
};

// Stats synchronization functions
export const syncUserStats = async (
  userId: string,
  stats: Record<string, number>
): Promise<void> => {
  const { error } = await supabase.rpc('sync_user_stats', {
    user_id_param: userId,
    stats_json: stats
  });
  
  if (error) throw error;
};

export const getUserStats = async (userId: string): Promise<Record<string, number>> => {
  const { data, error } = await supabase.rpc('get_user_stats', {
    user_id_param: userId
  });
  
  if (error) throw error;
  return data || {};
};
